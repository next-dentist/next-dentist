generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                String                    @id @default(cuid())
  name              String?
  email             String?                   @unique
  image             String?
  phone             String?                   @unique
  gender            String?
  resetToken        String?
  resetTokenExpires DateTime?
  dob               String?
  address           String?
  city              String?
  state             String?
  country           String?
  zip               String?
  role              Role?                     @default(USER)
  searchHistory     String?                   @db.Text
  emailVerified     Boolean                   @default(false)
  password          String?
  isOnline          Boolean                   @default(false)
  lastSeen          DateTime?
  accounts          Account[]
  appointments      Appointment[]
  Comment           Comment[]
  Dentist           Dentist[]
  favoriteDentists  FavoriteDentists[]
  locations         Locations[]
  messages          Message[]
  sentMessages      Message[]                 @relation("MessageSender")
  receivedMessages  Message[]                 @relation("MessageReceiver")
  conversations     ConversationParticipant[]
  typingIndicators  TypingIndicator[]
  Notification      Notification[]
  Post              Post[]
  Review            Review[]
  savedDentists     SavedDentists[]
  savedTreatments   SavedTreatments[]
  sessions          Session[]
  TreatmentsReviews TreatmentsReviews[]
  blogs             Blog[]

  @@map("user")
}

model Message {
  id          String        @id @default(cuid())
  content     String        @db.Text
  messageType MessageType   @default(TEXT)
  status      MessageStatus @default(SENT)
  replyToId   String?
  isEdited    Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  readAt      DateTime?
  deliveredAt DateTime?

  // Relationships
  conversationId String
  senderId       String
  receiverId     String

  conversation Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User                @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  replyTo      Message?            @relation("MessageReply", fields: [replyToId], references: [id])
  replies      Message[]           @relation("MessageReply")
  attachments  MessageAttachment[]

  // Legacy fields for backward compatibility
  senderUserId      String?
  receiverDentistId String?
  receiverDentist   Dentist? @relation(fields: [receiverDentistId], references: [id], onDelete: Cascade)
  senderUser        User?    @relation(fields: [senderUserId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@map("message")
}

model Conversation {
  id            String           @id @default(cuid())
  type          ConversationType @default(DIRECT)
  title         String?
  lastMessageId String?
  isArchived    Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversation")
}

model ConversationParticipant {
  id                String          @id @default(cuid())
  conversationId    String
  userId            String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?
  lastReadMessageId String?
  unreadCount       Int             @default(0)
  isMuted           Boolean         @default(false)
  isPinned          Boolean         @default(false)
  role              ParticipantRole @default(MEMBER)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversationparticipant")
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  filename  String
  url       String
  mimeType  String
  size      Int
  width     Int?
  height    Int?
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("messageattachment")
}

model TypingIndicator {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  startedAt      DateTime @default(now())
  expiresAt      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("typingindicator")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
  VIDEO
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  MEMBER
  ADMIN
  MODERATOR
}

model Visitors {
  id         String      @id @default(cuid())
  ipAddress  String
  browser    String
  device     String
  os         String
  referrer   String
  url        String
  language   String
  resolution String
  userAgent  String
  locationId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  locations  Locations[]

  @@map("visitors")
}

model Locations {
  id         String    @id @unique @default(cuid())
  name       String?
  userId     String?
  latitude   Float?
  longitude  Float?
  address    String?
  area       String?
  city       String?
  state      String?
  country    String?
  zip        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  visitorsId String?
  isDefault  Boolean   @default(false)
  isPrimary  Boolean   @default(true)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Visitors   Visitors? @relation(fields: [visitorsId], references: [id], onDelete: Cascade)

  @@map("locations")
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED_BY_PATIENT
  CANCELLED_BY_DENTIST
  RESCHEDULED
  COMPLETED
  NO_SHOW
}

model Appointment {
  id              String            @id @default(cuid())
  patientName     String?
  patientPhone    String
  patientEmail    String?
  patientAge      String?
  gender          String?
  userId          String?
  treatmentId     String?
  treatmentName   String?
  otherInfo       String?
  appointmentDate DateTime
  appointmentTime String
  status          AppointmentStatus @default(PENDING)
  dentistStatus   AppointmentStatus @default(PENDING)
  patientStatus   AppointmentStatus @default(PENDING)
  statusReason    String?           @db.Text
  lastModifiedBy  String? // admin, dentist, patient
  dentistId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  dentist         Dentist           @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

model SavedTreatments {
  id           String     @id @default(cuid())
  userId       String
  treatmentsId String
  treatments   Treatments @relation(fields: [treatmentsId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savedtreatments")
}

model SavedDentists {
  id        String  @id @default(cuid())
  userId    String
  dentistId String
  dentist   Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saveddentists")
}

model Images {
  id        String  @id @default(cuid())
  url       String
  dentistId String
  alt       String?
  height    Int?
  width     Int?
  Dentist   Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)

  @@index([dentistId], map: "images_dentistId_fkey")
  @@map("images")
}

model Dentist {
  id                    String              @id @default(cuid())
  timezone              String?
  userId                String
  name                  String?
  email                 String?             @unique
  emailVerified         Boolean             @default(false)
  image                 String?
  seo                   Json?
  priceStart            String?
  currency              String?             @default("â‚¹")
  gender                String?
  dob                   String?
  verified              Boolean             @default(false)
  freeConsultation      Boolean             @default(false)
  experience            String?
  shortBio              String?             @db.Text
  longBio               String?             @db.MediumText
  phone                 String?             @unique
  address               String?
  city                  String?
  state                 String?
  country               String?
  slug                  String              @unique @default(uuid())
  status                DentistStatus       @default(pending)
  rating                Float?              @default(0)
  totalReviews          Int?                @default(0)
  practiceLocation      String?
  latitude              Float?
  longitude             Float?
  speciality            String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  businessHours         Json?
  acceptsInsurance      Boolean?
  DegreesID             String?
  dentistDegree         Json?
  treatmentCompleted    Int?                @default(0)
  patientsServed        Int?                @default(0)
  isAvailable           Boolean?
  isOnline              Boolean?            @default(false)
  lastSeen              DateTime?
  isQuickResponse       Boolean?
  hasVideoCall          Boolean?
  specialLineOneTitle   String?
  specialLineOne        String?
  specialLineTwoTitle   String?
  specialLineTwo        String?
  specialLineThreeTitle String?
  specialLineThree      String?
  lastName              String?
  website               String?
  zipCode               String?
  dateAndTime           DateTime?           @default(now())
  updatedDateAndTime    DateTime?           @updatedAt
  Appointment           Appointment[]
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  FavoriteDentists      FavoriteDentists[]
  images                Images[]
  languages             Language[]
  messages              Message[]
  post                  Post[]
  SavedDentists         SavedDentists[]
  treatments            Treatments[]
  TreatmentsReviews     TreatmentsReviews[]
  specializations       Specialization[]
  faq                   FAQ[]
  socialLinks           Json?
  awards                Json?
  alumniOf              Json?
  workingAt             Json?
  nationality           String?
  knowsAbout            Json?
  Reviews               Review[]
  features              DentistFeature[]

  @@map("dentist")
}

model DentistFeature {
  dentist   Dentist @relation(fields: [dentistId], references: [id])
  dentistId String

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  @@id([dentistId, featureId])
}

model Feature {
  id    String @id @default(cuid())
  key   String @unique // e.g. "FREE_WIFI", "CREDIT_CARDS"
  label String // e.g. "Free Wi-Fi", "Accept Credit Cards"

  dentists DentistFeature[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Topic {
  id          String   @id @default(cuid())
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  @@map("topic")
}

model Post {
  id         String         @id @default(cuid())
  image      String?
  imageAlt   String?
  title      String
  content    String
  userId     String
  topicId    String
  dentistId  String
  categoryId String
  slug       String         @unique @default(uuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   Comment[]
  dentist    Dentist        @relation(fields: [dentistId], references: [id])
  topic      Topic          @relation(fields: [topicId], references: [id])
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections   postSections[]
  category   postCategories @relation(fields: [categoryId], references: [id])

  @@map("post")
}

model postCategories {
  id   String @id @default(cuid())
  name String
  slug String @unique
  post Post[]

  @@map("postcategories")
}

model postSections {
  id      String  @id @default(cuid())
  postId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  title   String
  content String  @db.MediumText
  image   String?
  video   String?
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("Comments")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Treatments {
  id   String  @id @default(cuid())
  slug String?

  image             String?
  name              String
  description       String?             @db.Text
  price             String?
  currency          String              @default("â‚¹")
  minPrice          String?
  maxPrice          String?
  dentistId         String
  duration          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TreatmentMetaId   String?
  SavedTreatments   SavedTreatments[]
  TreatmentMeta     TreatmentMeta?      @relation(fields: [TreatmentMetaId], references: [id], onDelete: Cascade)
  dentist           Dentist             @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  TreatmentsReviews TreatmentsReviews[]

  @@map("treatments")
}

model TreatmentsReviews {
  id           String     @id @default(cuid())
  rating       Int
  content      String
  userId       String
  treatmentsId String
  dentistId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dentist      Dentist    @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  treatments   Treatments @relation(fields: [treatmentsId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("treatmentsreviews")
}

model Language {
  id        String  @id @default(cuid())
  name      String
  dentistId String
  dentist   Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)

  @@index([dentistId], map: "language_dentistId_fkey")
  @@map("language")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notification_userId_fkey")
  @@map("notification")
}

model DentistsMeta {
  id    String @id @default(cuid())
  key   String
  value String

  @@map("dentistsmeta")
}

model Degree {
  id       String @id @default(cuid())
  name     String
  fullName String

  @@map("degree")
}

model Specialization {
  id      String    @id @default(cuid())
  name    String
  key     String
  dentist Dentist[]

  @@map("specialization")
}

model FavoriteDentists {
  id        String  @id @default(cuid())
  userId    String
  dentistId String
  Dentist   Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favoritedentists")
}

model TreatmentMeta {
  id                       String            @id @default(cuid())
  image                    String?           @default("")
  seo_title                String?           @default("")
  seo_description          String?           @default("")
  seo_extra                Json?             @default("{}")
  seo_keyword              String?           @default("")
  beforeAfter              String?           @db.Text
  name                     String?           @default("")
  description              String?           @db.Text
  duration                 String?           @default("")
  slug                     String?           @unique @default(uuid())
  relatedKeys              String?           @db.Text
  contents                 String?           @db.MediumText
  dateAndTime              DateTime?         @default(now())
  updatedDateAndTime       DateTime?         @updatedAt
  video                    String?           @default("")
  imageCaption             String?           @default("")
  imageCaptionLink         String?           @default("")
  imageTopRightDescription String?           @default("")
  imageTopRightLink        String?           @default("")
  imageTopRightText        String?           @default("")
  imageTopRightLinkText    String?           @default("")
  costs                    Cost[]
  faq                      FAQ[]
  instructions             Instruction[]
  sections                 Section[]
  images                   TreatmentImages[]
  Treatments               Treatments[]
  videos                   TreatmentVideos[]
  CostPages                CostPages?        @relation(fields: [costPagesId], references: [id])
  costPagesId              String?

  @@map("treatmentmeta")
}

model Section {
  id              String         @id @default(cuid())
  icon            String?
  menuText        String?
  cssId           String?
  title           String
  content         String         @db.MediumText
  treatmentMetaId String?
  buttonLink      String?
  buttonText      String?
  image           String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)

  @@map("section")
}

model Cost {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  priceMin        String?
  priceMax        String?
  priceSuffix     String?
  pricePrefix     String?
  currency        String?        @default("â‚¹")
  treatmentMetaId String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)

  @@map("cost")
}

model FAQ {
  id              String         @id @default(cuid())
  question        String         @db.Text
  answer          String         @db.Text
  treatmentMetaId String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)
  dentistId       String?
  Dentist         Dentist?       @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt

  @@map("faq")
}

model TreatmentImages {
  id              String         @id @default(cuid())
  url             String?
  treatmentMetaId String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)

  @@map("treatmentimages")
}

model TreatmentVideos {
  id              String         @id @default(cuid())
  url             String?
  image           String?
  imageAlt        String?
  description     String?
  treatmentMetaId String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)

  @@map("treatmentvideos")
}

model Instruction {
  id              String         @id @default(cuid())
  type            String?
  title           String
  content         String         @db.Text
  icon            String?
  buttonText      String?
  buttonLink      String?
  treatmentMetaId String?
  TreatmentMeta   TreatmentMeta? @relation(fields: [treatmentMetaId], references: [id], onDelete: Cascade)

  @@map("instruction")
}

enum Role {
  USER
  DENTIST
  ADMIN
}

enum DentistStatus {
  pending
  verified
  rejected
  banned
  deleted
  suspended
  closed
}

enum BlogStatus {
  draft
  published
  scheduled
  deleted
}

model Blog {
  id    String  @id @default(cuid())
  image String?
  slug  String? @unique @default(uuid())

  imageAlt       String?
  seoTitle       String?
  seoDescription String?
  seoExtra       Json?
  categoryId     String?
  category       BlogCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  seoKeyword     String?
  title          String?
  content        String?       @db.MediumText
  status         BlogStatus?   @default(draft)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  author         User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String?
  authorName     String?
  authorEmail    String?
  authorImage    String?
  authorRole     String?
  authorBio      String?

  @@map("blog")
}

model BlogCategory {
  id    String @id @default(cuid())
  name  String
  slug  String @unique
  blogs Blog[]
}

model CostPageCategory {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  costPages CostPages[]
}

model CostPages {
  id                 String                 @id @default(cuid())
  categoryId         String?
  category           CostPageCategory?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  city               String?
  title              String
  slug               String                 @unique
  content            String                 @db.MediumText
  image              String?
  imageAlt           String?
  costTables         CostTable[]
  tableSets          CostTableSet[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  TreatmentMeta      TreatmentMeta[]
  CostSection        CostSection[]
  costImages         costImages[]
  CostVideo          CostVideo[]
  dateAndTime        DateTime?              @default(now())
  updatedDateAndTime DateTime?              @updatedAt
  authorId           String?
  authorName         String?
  authorEmail        String?
  authorImage        String?
  authorRole         String?
  authorBio          String?
  relatedKeys        Json?
  seoTitle           String?
  seoDescription     String?
  seoExtra           Json?
  faqs               CostFAQ[]
  appointments       costTableAppointment[]

  @@map("costpage")
}

model CostTableSet {
  id         String      @id @default(cuid())
  name       String
  slug       String?
  costPageId String
  costPage   CostPages   @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  costTables CostTable[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("costtableset")
}

model CostTable {
  id                   String                 @id @default(cuid())
  title                String
  titleUrl             String?
  content              String                 @db.MediumText
  image                String?
  imageAlt             String?
  currencyOne          String?
  currencyTwo          String?
  currencyThree        String?
  costOne              String?
  costTwo              String?
  costThree            String?
  costPageId           String
  tableSetId           String?
  costPage             CostPages              @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  tableSet             CostTableSet?          @relation(fields: [tableSetId], references: [id], onDelete: SetNull)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  costTableAppointment costTableAppointment[]

  @@map("costtable")
}

model costTableAppointment {
  id          String    @id @default(cuid())
  costTableId String
  costTable   CostTable @relation(fields: [costTableId], references: [id], onDelete: Cascade)
  costPageId  String
  costPage    CostPages @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  dateAndTime DateTime?

  patientName    String
  patientPhone   String
  patientEmail   String?
  patientAge     String?
  patientGender  String?
  patientCity    String?
  patientCountry String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("costtableappointment")
}

model CostSection {
  id          String    @id @default(cuid())
  title       String
  image       String?
  imageAlt    String?
  content     String?   @db.MediumText
  costPageId  String
  CostPage    CostPages @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dateAndTime DateTime? @default(now())

  @@map("costsection")
}

model costImages {
  id          String    @id @default(cuid())
  image       String
  imageAlt    String?
  costPageId  String
  CostPage    CostPages @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dateAndTime DateTime? @default(now())

  @@map("costimages")
}

model CostVideo {
  id          String    @id @default(cuid())
  video       String
  videoAlt    String?
  costPageId  String
  CostPage    CostPages @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dateAndTime DateTime? @default(now())

  @@map("costvideo")
}

model CostFAQ {
  id         String    @id @default(cuid())
  question   String    @db.Text
  answer     String    @db.Text
  costPageId String
  CostPage   CostPages @relation(fields: [costPageId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("costfaq")
}

model Media {
  id         String   @id @default(cuid())
  filename   String
  url        String   @unique // remote URL you'll serve from Nginx / CDN
  mimeType   String
  size       Int
  width      Int? // populated if you generate thumbs
  height     Int?
  createdAt  DateTime @default(now())
  uploadedBy String? // optional user id
}

model Review {
  id String @id @default(cuid())

  /// MAIN "headline" rating (1â€’5)
  rating Int @db.TinyInt

  title     String?  @db.VarChar(60)
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewerName  String
  reviewerEmail String? @db.VarChar(191)

  status ReviewStatus @default(PENDING)

  // Relations to User and Dentist
  userId String? // Optional - for authenticated users
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  dentistId String
  dentist   Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)

  /// Granular scores/subratings
  subratings ReviewRating[] @relation("ReviewToRating")

  @@map("review")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
///  Extensible rating system
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
model RatingCategory {
  id String @id @default(cuid())

  name String @unique

  label String?

  ratings ReviewRating[] @relation("CategoryToRating")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratingcategory")
}

model ReviewRating {
  id String @id @default(cuid())

  value Int @db.TinyInt // Rating value (1-5)

  reviewId String
  review   Review @relation("ReviewToRating", fields: [reviewId], references: [id], onDelete: Cascade)

  categoryId String
  category   RatingCategory @relation("CategoryToRating", fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([reviewId, categoryId])
  @@map("reviewrating")
}
